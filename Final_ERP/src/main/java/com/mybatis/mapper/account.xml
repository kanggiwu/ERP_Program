<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.mybatis.mapper.AccountManagerMapper">
	<resultMap  type="map" id="profitMap"/>
	<resultMap  type="map" id="expenseMap"/>
	
	<!-- 사원의 급여 정보 조회 (현재 년/월) -->
	<select id="getCurrentSalaryAndEmpInfo" parameterType="map">
	SELECT dept_name, salary.emp_no, rank_name, emp_name, emp_hiredate, emp_account,
       DECODE (sal_base, NULL, '0', sal_base), DECODE (sal_incentive, NULL, '0', sal_incentive),
       DECODE (sal_position, NULL, '0', sal_position), DECODE (sal_nation_pension, NULL, '0', sal_nation_pension),
       DECODE (sal_health, NULL, '0', sal_health), DECODE (sal_industrial_insurance, NULL, '0', sal_industrial_insurance),
       DECODE (sal_employ_insurance, NULL, '0', sal_employ_insurance), DECODE (sal_income_tax, NULL, '0', sal_income_tax),
       DECODE (sal_tech, NULL, '0', sal_tech), DECODE (sal_meal, NULL, '0', sal_meal),
       DECODE (sal_commu, NULL, '0', sal_commu), DECODE (sal_local_tax, NULL, '0', sal_local_tax),
       DECODE (sal_etc, NULL, '0', sal_etc), DECODE (sal_deduction_etc, NULL, '0', sal_deduction_etc),
       DECODE (sal_total, NULL, '0', sal_total), DECODE (sal_deductions, NULL, '0', sal_deductions)
  	FROM Salary
    JOIN (SELECT dept.dept_name dept_name, emp.emp_no emp_no,
                  emp.emp_name emp_name, emp.emp_hiredate emp_hiredate,
                  emp.emp_account emp_account, RANK.rank_name rank_name
          FROM emp, dept, RANK
          WHERE emp.dept_no = dept.dept_no AND emp.rank_no = RANK.rank_no) emp_info
    ON salary.emp_no = emp_info.emp_no
    AND SUBSTR (salary.sal_date, 0, 7) = TO_CHAR (SYSDATE, 'yyyy-mm')
    AND salary.emp_no = #{emp_no}
	</select>
	
	<!-- 급여 정보 수정 -->
	<update id="updateSalary" parameterType="map">
		UPDATE salary
		SET
    		sal_base = NVL(#{sal_base}, 0),
    		sal_incentive = NVL(#{sal_incentive}, 0),
   			sal_position = NVL(#{sal_position}, 0),
    		sal_tech = NVL(#{sal_tech}, 0),
    		sal_etc = NVL(#{sal_etc}, 0),
    		sal_meal = NVL(#{sal_meal}, 0),
    		sal_commu = NVL(#{sal_commu}, 0),
		WHERE sal_no = #{sal_no} AND emp_no = #{emp_no}
	</update>
	
	<!-- 급여 세금과 급여 합계 계산하여 데이터를 삽입하는 프로시저-->  
	<select id="setSalaryProc" statementType="CALLABLE" parameterType="map">
		{call proc_set_salary(        
          #{p_emp_no, mode=IN, jdbcType=NUMERIC},
          #{p_sal_no, mode=IN, jdbcType=NUMERIC}
       	)}
	</select>
	
	<!-- 급여 총계 계산하여 반환하는 프로시저-->  
	<select id="getSalaryProc" statementType="CALLABLE" parameterType="map">
		{call proc_get_salary(        
          #{p_emp_no, mode=IN, jdbcType=NUMERIC},
          #{p_sal_date, mode=IN, jdbcType=VARCHAR},
          #{sal_cursor, mode=OUT, jdbcType=CURSOR, resultMap=salaryMap}
       	)}
	</select>
	
	<!-- 급여 정보 추가 -->
	<insert id="insertSalary" parameterType="map">
		INSERT INTO salary (sal_no, emp_no, sal_date, sal_base, sal_incentive, sal_position, sal_tech, sal_etc, sal_meal, sal_commu)
                  VALUES (seq_salary,  #{emp_no}, #{sal_date}, #{sal_base}, #{sal_incentive}, #{sal_position}, #{sal_tech}, #{sal_etc}, #{sal_meal}, #{sal_commu})
    </insert>
    
    <!-- 수익 리스트 가져오기 -->  
	<select id="getProfitList" resultType="map"> 
	SELECT project_name, substr(project_startline,1,10) PROJECT_STARTLINE, nvl(substr(project_deadline,1,10),'미완') PROJECT_DEADLINE, project_type, project_profit
  	  FROM project
  		<where>
  		<if test="PROJECT_NAME != null">
  		AND poject_name LIKE '%'||#{PROJECT_NAME}||'%'
  		</if>
 		<if test="PROJECT_STARTLINE != null">
 		AND project_startline <![CDATA[>=]]> #{PROJECT_STARTLINE}
 		</if>
 		<if test="PROJECT_DEADLINE != null">
 		AND project_deadline <![CDATA[<=]]> #{PROJECT_DEADLINE}
 		</if>
 		<if test="PROJECT_TYPE != null">
 		AND project_type = #{PROJECT_TYPE}
 		</if>
 		</where>
 	ORDER BY project_deadline DESC
	</select>
	
	<!-- 수익 관리 수정 -->
	<update id="updateProfit" parameterType="map">
		UPDATE profit
		SET
    	project_no = #{project_no},
    	profit_price = #{profit_price},
    	profit_date = #{profit_date}
		WHERE profit_no = #{profit_no}
	</update>
	
	<!-- 수익 관리 추가 -->
	<insert id="insertProfit" parameterType="map">
		INSERT INTO profit (profit_no, project_no, profit_price, profit_date)
                 VALUES (#{profit_no}, #{project_no}, #{profit_price}, #{profit_date})
    </insert>
	

	<!-- 지출 관리 조회 -->
<select id="getExpenseList" resultType="map"> 
   SELECT expense_no, dept_no, expense_type, expense_price, expense_detail, expense_date
      FROM expense
    <where>
		<if test="EXPENSE_DATE != null">
       AND expense_date like #{EXPENSE_DATE}||'%'
       </if>
    </where>
    ORDER BY expense_date DESC
   </select>
	
	<!-- 지출 관리 수정 -->
	<update id="updateExpense" parameterType="map">
		UPDATE expense
		SET
    		dept_no = #{dept_no},
   			expense_type = #{expense_type},
    		expense_price = NVL(#{expense_price}, 0),
    		expense_detail = #{expense_detail},
    		expense_date = #{expense_date}
		WHERE expense_no = #{expense_no}
	</update>
	
	<!-- 지출 관리 추가 -->
	<insert id="insertExpense" parameterType="map">
		<selectKey keyProperty="expense_no" resultType="int" order="BEFORE">
		SELECT seq_expense_no.NEXTVAL FROM DUAL
        </selectKey>
		INSERT INTO expense (expense_no, dept_no, expense_type, expense_price, expense_detail, expense_date)
                  VALUES (#{expense_no}, #{dept_no}, #{expense_type}, #{expense_price}, #{expense_detail}, #{expense_date})
    </insert>
    
	<!-- 손익 조회 -->
    <select id="getBalanceList" resultType="map"> 
      SELECT  SUBSTR(profit_date, 1, 7) as total_date, SUM(profit_price) as month_profit, SUM(expense_price) as month_expense, SUM(profit_price)-SUM(expense_price) as month_balance
        FROM profit, expense
      <where>
         <if test="START_MONTH != null">
         AND SUBSTR(profit_date, 1, 7) <![CDATA[>=]]> START_MONTH
         </if>
         <if test="END_MONTH != null">
         AND SUBSTR(profit_date, 1, 7) <![CDATA[<=]]> END_MONTH
         </if>
       </where>
      GROUP BY SUBSTR(profit_date, 1, 7), SUBSTR(expense_date, 1, 7)
      HAVING SUBSTR(profit_date, 1, 7) = SUBSTR(expense_date, 1, 7)
      ORDER BY total_date
    </select>  
	
	<!-- 월말 결산 -->
	<select id="getMonthStateProc" statementType="CALLABLE" parameterType="map">
		{call proc_get_month_statement(        
          #{p_month, mode=IN, jdbcType=VARCHAR},
          #{profit_cursor, mode=OUT, jdbcType=CURSOR, resultMap=profitMap},
          #{profit_sum, mode=OUT, jdbcType=NUMERIC},
          #{expense_cursor, mode=OUT, jdbcType=CURSOR, resultMap=expenseMap},
          #{expense_sum, mode=OUT, jdbcType=NUMERIC},
          #{total, mode=OUT, jdbcType=NUMERIC}
       	)}
	</select>    
	
    
</mapper>